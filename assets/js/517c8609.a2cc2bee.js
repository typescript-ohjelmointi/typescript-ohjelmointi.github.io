"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[421],{2444:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var t=i(5893),a=i(1151);const s={sidebar_position:6},o="Map-tyypit (mapped types)",r={id:"tyypit/mapped-types",title:"Map-tyypit (mapped types)",description:"JavaScriptiss\xe4 olioita (object) k\xe4ytet\xe4\xe4n usein avain-arvo-pareja sis\xe4lt\xe4v\xe4n\xe4 map-tietorakenteena, esimerkiksi seuraavasti:",source:"@site/docs/tyypit/06-mapped-types.md",sourceDirName:"tyypit",slug:"/tyypit/mapped-types",permalink:"/docs/tyypit/mapped-types",draft:!1,unlisted:!1,editUrl:"https://github.com/typescript-ohjelmointi/typescript-ohjelmointi.github.io/tree/main/docs/tyypit/06-mapped-types.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Tyyppien unionit ja leikkaukset",permalink:"/docs/tyypit/unions-intersections"},next:{title:"Tyyppivahdit ja -predikaatit",permalink:"/docs/tyypit/type-guards"}},l={},p=[{value:"Map-tyypin m\xe4\xe4rittely",id:"map-tyypin-m\xe4\xe4rittely",level:2},{value:"Record-tyyppi",id:"record-tyyppi",level:2},{value:"Map-tyyppien soveltaminen",id:"map-tyyppien-soveltaminen",level:2},{value:"Olemassa olevan tyypin k\xe4ytt\xe4minen map-tyypiss\xe4",id:"olemassa-olevan-tyypin-k\xe4ytt\xe4minen-map-tyypiss\xe4",level:3},{value:"Esimerkkej\xe4 geneerisist\xe4 map-tyypeist\xe4",id:"esimerkkej\xe4-geneerisist\xe4-map-tyypeist\xe4",level:3},{value:"Union type of the values in an array with [number]-syntax",id:"union-type-of-the-values-in-an-array-with-number-syntax",level:2},{value:"Index signatures ([key: xxx])",id:"index-signatures-key-xxx",level:2},{value:"Mapping allows future additions to reflect on depending types &quot;automatically&quot;",id:"mapping-allows-future-additions-to-reflect-on-depending-types-automatically",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"map-tyypit-mapped-types",children:"Map-tyypit (mapped types)"}),"\n",(0,t.jsx)(n.p,{children:"JavaScriptiss\xe4 olioita (object) k\xe4ytet\xe4\xe4n usein avain-arvo-pareja sis\xe4lt\xe4v\xe4n\xe4 map-tietorakenteena, esimerkiksi seuraavasti:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'let postinumerot = {\n    "74701": "Kiuruvesi",\n    "35540": "Juupajoki",\n    "74700": "Kiuruvesi",\n    "73460": "Muuruvesi"\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"T\xe4m\xe4 poikkeaa oppimateriaalin aikaisemmista tyypeist\xe4 siten, ett\xe4 olion attribuuttien nimet, eli t\xe4ss\xe4 tpaauksessa postinumerot, eiv\xe4t ole ennalta tiedossa. T\xe4h\xe4n tietorakenteeseen voidaankin lis\xe4t\xe4 my\xf6hemmin uusia avain-arvo-pareja:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'postinumerot["00730"] = "Helsinki";\n'})}),"\n",(0,t.jsx)(n.h2,{id:"map-tyypin-m\xe4\xe4rittely",children:"Map-tyypin m\xe4\xe4rittely"}),"\n",(0,t.jsxs)(n.p,{children:["Postinumeroesimerkin tapauksessa olion tyyppi halutaan m\xe4\xe4ritell\xe4 siten, ett\xe4 sen avaimiksi hyv\xe4ksyt\xe4\xe4n mik\xe4 tahansa merkkijono, ja arvojen on oltava merkkijonoja. TypeScript mahdollistaa ns. ",(0,t.jsx)(n.a,{href:"https://basarat.gitbook.io/typescript/type-system/index-signatures#declaring-an-index-signature",children:"index signaturen"}),", jolla voidaan m\xe4\xe4ritell\xe4 objektin avainten sek\xe4 arvojen tyypit:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'let postinumerot: { [key: string]: string } = {\n    "74701": "Kiuruvesi",\n    "35540": "Juupajoki",\n    "74700": "Kiuruvesi",\n    "73460": "Muuruvesi"\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Yll\xe4 muuttujan tyyppin\xe4 on siis ",(0,t.jsx)(n.code,{children:"{ [key: string]: string }"}),", joka m\xe4\xe4rittelee vasemmalla puolella avaimen tyypiksi ",(0,t.jsx)(n.code,{children:"string"})," ja vasemmalla puolella arvon tyypiksi ",(0,t.jsx)(n.code,{children:"string"}),". Nyt ",(0,t.jsx)(n.code,{children:"postinumerot"}),"-muuttujassa olevaan olioon voidaan asettaa ainoastaan avaimiksi ja arvoiksi ainoastaan merkkijonoja."]}),"\n",(0,t.jsx)(n.p,{children:"Kokeile esimerkiksi suorittaa ja muokata seuraavaa koodiesimerkki\xe4 omassa editorissasi:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let emojis: { [key: string]: string } = {};\nemojis['smile'] = '\ud83d\ude42';\nemojis['laugh'] = '\ud83d\ude04';\n\n\n// objektin kaikki avaimet saadaan array:na JS:n Object.keys-metodilla:\nconsole.log(Object.keys(emojis));   // [ 'smile', 'laugh' ]\n\n// objektin kaikki arvot saadaan array:na JS:n Object.values-metodilla:\nconsole.log(Object.values(emojis)); // [ '\ud83d\ude42', '\ud83d\ude04' ]\n\n\n// TypeScript ei takaa, ett\xe4 avaimelle l\xf6ytyy arvoa:\nconsole.log(emojis['angry']);       // undefined\n\n// avain voidaan tarkastaa `in`-operaatiolla:\nif ('smile' in emojis) {\n    console.log(emojis['smile']);   // \ud83d\ude42\n}\n\nconsole.table(emojis); /* \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u2502 (index) \u2502 Values \u2502\n                          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n                          \u2502  smile  \u2502  '\ud83d\ude42'  \u2502\n                          \u2502  laugh  \u2502  '\ud83d\ude04'  \u2502\n                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 */\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"record-tyyppi",children:"Record-tyyppi"}),"\n",(0,t.jsxs)(n.p,{children:["TypeScriptin ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",children:'"utility types"-tyypeist\xe4'})," l\xf6ytyy my\xf6s valmis ",(0,t.jsx)(n.code,{children:"Record"}),", jonka avulla objektin avainten ja arvojen tyypit on m\xe4\xe4ritett\xe4viss\xe4 viel\xe4 astetta selke\xe4mmin:"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Record<Keys, Type>"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:'"Constructs an object type whose property keys are Keys and whose property values are Type. This utility can be used to map the properties of a type to another type."'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",children:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Record"}),"-tyypin avulla edell\xe4 esitetty ",(0,t.jsx)(n.code,{children:"{ [key: string]: string }"})," voidaankin esitt\xe4\xe4 hieman selke\xe4mm\xe4ll\xe4 tavalla ",(0,t.jsx)(n.code,{children:"Record<string, string>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let weekdays: Record<string, string> = {};\nweekdays['monday'] = 'maanantai';\nweekdays['tuesday'] = 'tiistai';\n\nconsole.log(weekdays);                  // { monday: 'maanantai', tuesday: 'tiistai' }\nconsole.log('tuesday' in weekdays);     // true\n\nconsole.log(weekdays['someday']);       // undefined\n"})}),"\n",(0,t.jsxs)(n.p,{children:["K\xe4yt\xe4nn\xf6ss\xe4 ",(0,t.jsx)(n.code,{children:"Record"}),' on vain tyyppialias "index signaturelle", ja se on m\xe4\xe4ritetty ',(0,t.jsx)(n.a,{href:"https://github.com/microsoft/TypeScript/blob/81793210e6337ad8d20f2b7e44e9489687c2d29c/src/lib/es5.d.ts#L1587",children:"TypeScriptin omassa l\xe4hdekoodissa seuraavasti"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Yll\xe4 ",(0,t.jsx)(n.code,{children:"keyof any"})," tuottaa unionin ",(0,t.jsx)(n.code,{children:"string | number | symbol"}),". ",(0,t.jsx)(n.code,{children:"Record"}),"-tyypin avaimina k\xe4ytet\xe4\xe4nkin p\xe4\xe4asiassa merkkijonoja ja numeroita. Arvoina voidaan k\xe4ytt\xe4\xe4 mit\xe4 tahansa tyyppi\xe4 ",(0,t.jsx)(n.code,{children:"T"}),". Koska arvon tyypiksi k\xe4y mik\xe4 vain, voit k\xe4ytt\xe4\xe4 my\xf6s unioneita ja leikkauksia, kuten:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let favorites: Record<string, string | number> = {};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"map-tyyppien-soveltaminen",children:"Map-tyyppien soveltaminen"}),"\n",(0,t.jsx)(n.h3,{id:"olemassa-olevan-tyypin-k\xe4ytt\xe4minen-map-tyypiss\xe4",children:"Olemassa olevan tyypin k\xe4ytt\xe4minen map-tyypiss\xe4"}),"\n",(0,t.jsxs)(n.p,{children:["Mik\xe4li haluat k\xe4yd\xe4 olemassa olevan tyypin l\xe4pi ja muodostaa sen perusteella uuden map-tyypin, onnistuu se ",(0,t.jsx)(n.code,{children:"in"}),"-operaattorin avulla. ",(0,t.jsx)(n.code,{children:"in"})," muodostaa esimerkiksi unionin jokaista tyyppi\xe4 tyyppi\xe4 kohden uuden attribuutin."]}),"\n",(0,t.jsxs)(n.p,{children:["Jos koodissamme on esimerkiksi ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/RGB_color_model",children:"RGB-arvoja"})," mallintava ",(0,t.jsx)(n.code,{children:"Color"}),"-tyyppi, jossa ",(0,t.jsx)(n.code,{children:"red"}),", ",(0,t.jsx)(n.code,{children:"green"})," ja ",(0,t.jsx)(n.code,{children:"blue"})," saa numeeriset arvot, voimme k\xe4ytt\xe4\xe4 t\xe4t\xe4 tyyppi\xe4 uuden ",(0,t.jsx)(n.code,{children:"string -> string"}),"-tyyppisen mapin luomiseksi:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface Color {\n    red: number;\n    green: number;\n    blue: number;\n}\n\ntype StringColors = { [c in keyof Color]: string }\n/*\n * Sama kuin:\n * type mapped = {\n *   red: string;\n *   green: string;\n *   blue: string;\n * }\n*/\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Sama saadaan aikaiseksi ",(0,t.jsx)(n.code,{children:"Record"}),"-tyypin avulla k\xe4ytt\xe4m\xe4ll\xe4 avaimen tyyppin\xe4 ",(0,t.jsx)(n.code,{children:"keyof Color"})," ja arvona ",(0,t.jsx)(n.code,{children:"string"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type StringColors = Record<keyof Color, string>;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Lue aiheesta lis\xe4\xe4 osoitteista ",(0,t.jsx)(n.a,{href:"https://learntypescript.dev/08/l2-mapped-type",children:"https://learntypescript.dev/08/l2-mapped-type"})," ja ",(0,t.jsx)(n.a,{href:"https://javascript.plainenglish.io/using-typescript-mapped-types-like-a-pro-be10aef5511a",children:"https://javascript.plainenglish.io/using-typescript-mapped-types-like-a-pro-be10aef5511a"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type MappedTypeName = { [K in UnionType]: ExistingType };\ntype MappedTypeName = { [K in keyof ExistingType1]: ExistingType2 };\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface Todo {\n    title: string\n    description: string\n    completed: boolean\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'//k in ...\n//..manually. Try adding something else to in\ntype TodoConstucted = {[K in "title" | "description" | "completed"]: Todo[K]}\n//..utilizing keyof\ntype TodoConstucted2 = {[K in keyof Todo]: Todo[K]}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"esimerkkej\xe4-geneerisist\xe4-map-tyypeist\xe4",children:"Esimerkkej\xe4 geneerisist\xe4 map-tyypeist\xe4"}),"\n",(0,t.jsx)(n.p,{children:"Tutki ja muokkaa omassa koodieditorissasi seuraavia map-tyyppisi\xe4 m\xe4\xe4rityksi\xe4, joissa hy\xf6dynnet\xe4\xe4n geneerisi\xe4 tyyppej\xe4:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type MyMakeOptional<T> = {\n    [P in keyof T]?: T[P];\n};\n\n//-? expression\ntype MyRemoveOptional<T> = {\n    [P in keyof T]-?: T[P];\n};\n\ntype MyReadonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\nconst optionalTodo: MyMakeOptional<Todo> = { title: 'Optional todo' };\nconst readOnlyTodo: MyReadonly<Todo> = { title: 'Read only todo', description: 'desc', completed: false };\nreadOnlyTodo.title = 'Todo 2'; // Error: Cannot assign to 'Todo 2' because it mapped to a read-only property.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"union-type-of-the-values-in-an-array-with-number-syntax",children:"Union type of the values in an array with [number]-syntax"}),"\n",(0,t.jsx)(n.p,{children:"Tutki ja muokkaa omassa koodieditorissasi seuraavia map-tyyppisi\xe4 m\xe4\xe4rityksi\xe4:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const myArray = ['one', 'two'] as const\ntype ArrayType = typeof myArray\ntype ValidNumber = typeof myArray[number]\n//why not this?\ntype ValidNumber2 = typeof myArray[keyof ArrayType]\n//what about this, arrays are actually objects, aren't they? (//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_object)?\ntype ValidNumber3 = typeof myArray[0 | 1]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"index-signatures-key-xxx",children:"Index signatures ([key: xxx])"}),"\n",(0,t.jsx)(n.p,{children:"Tutki ja muokkaa omassa koodieditorissasi seuraavia map-tyyppisi\xe4 m\xe4\xe4rityksi\xe4."}),"\n",(0,t.jsxs)(n.p,{children:["Lue aiheesta lis\xe4\xe4 artikkeleista\n",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures",children:"https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures"})," ja ",(0,t.jsx)(n.a,{href:"https://blog.logrocket.com/typescript-mapped-types/",children:"https://blog.logrocket.com/typescript-mapped-types/"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type User = {\n    name: string;\n    preferences: {\n      [key: string]: string;\n    }\n};\nconst currentUser: User = {\n    name: 'Foo Bar',\n    preferences: {\n        lang: 'en',\n    },\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"mapping-allows-future-additions-to-reflect-on-depending-types-automatically",children:'Mapping allows future additions to reflect on depending types "automatically"'}),"\n",(0,t.jsx)(n.p,{children:"Map-tyypit mahdollistavat uusien arvojen huomioimisen automaattisesti, kun ohjelmaan tulee esimerkiksi uusia konfiguraatioihin liittyvi\xe4 ominaisuuksia."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://blog.logrocket.com/typescript-mapped-types/",children:"https://blog.logrocket.com/typescript-mapped-types/"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'type AppConfig = {\n    username: string,\n    layout: string,\n    //more in the future possibly, try adding here something\n}\n\n// Whether or not the user has permission to change configuration values\ntype AppPermissions = {\n    // Notice the as-keyword\n    // Notice template literal `change${Type}`\n    // and "intrinsic string manipulation" (Capitalize)\n    //(https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html)\n    [Key in keyof AppConfig as `change${Capitalize<Key>}`]: boolean\n}\n\nconst appPermission: AppPermissions = {changeUsername: true, changeLayout: false}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["T\xe4m\xe4 esimerkki on jo huomattavasti edistyneempi ja se hy\xf6dynt\xe4\xe4 my\xf6s ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html",children:"Capitalize-tyyppi\xe4"}),", johon voit tutustua itsen\xe4isesti ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html",children:"TypeScriptin k\xe4sikirjassa"}),"."]})]})}function y(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>o});var t=i(7294);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);