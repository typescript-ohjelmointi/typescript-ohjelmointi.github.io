"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[373],{4206:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var n=a(5893),i=a(1151);const s={sidebar_position:7},o="Tyyppivahdit ja -predikaatit",r={id:"tyypit/type-guards",title:"Tyyppivahdit ja -predikaatit",description:"Erilaiset tyyppien tarkastukset ovat TypeScriptiss\xe4 varsin yleisi\xe4. Tarkastuksia, jotka rajaavat esimerkiksi unionityypin mahdollisia arvoja ohjelmakoodissa kutsutaan tyyppivahdeiksi (type guard). Usein tyyppien tarkastamista joudutaan tekem\xe4\xe4n niin usein, ett\xe4 tarkastusta varten kannattaa toteuttaa my\xf6s erillinen predikaattifunktio (type predicate).",source:"@site/docs/tyypit/07-type-guards.md",sourceDirName:"tyypit",slug:"/tyypit/type-guards",permalink:"/docs/tyypit/type-guards",draft:!1,unlisted:!1,editUrl:"https://github.com/typescript-ohjelmointi/typescript-ohjelmointi.github.io/tree/main/docs/tyypit/07-type-guards.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Map-tyypit (mapped types)",permalink:"/docs/tyypit/mapped-types"},next:{title:"Aputyypit",permalink:"/docs/tyypit/utility-types"}},l={},p=[{value:"Tyyppivahdit (type guard)",id:"tyyppivahdit-type-guard",level:2},{value:"Predikaatit (type predicates)",id:"predikaatit-type-predicates",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"tyyppivahdit-ja--predikaatit",children:"Tyyppivahdit ja -predikaatit"}),"\n",(0,n.jsxs)(t.p,{children:["Erilaiset tyyppien tarkastukset ovat TypeScriptiss\xe4 varsin yleisi\xe4. Tarkastuksia, jotka rajaavat esimerkiksi unionityypin mahdollisia arvoja ohjelmakoodissa kutsutaan ",(0,n.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#typeof-type-guards",children:"tyyppivahdeiksi (type guard)"}),". Usein tyyppien tarkastamista joudutaan tekem\xe4\xe4n niin usein, ett\xe4 tarkastusta varten kannattaa toteuttaa my\xf6s erillinen ",(0,n.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates",children:"predikaattifunktio (type predicate)"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"tyyppivahdit-type-guard",children:"Tyyppivahdit (type guard)"}),"\n",(0,n.jsxs)(t.p,{children:["Otetaan esimerkiksi seuraava ",(0,n.jsx)(t.code,{children:"formatDate"}),"-funktio, joka ottaa parametrinaan tietyn ajanhetken joko ",(0,n.jsx)(t.code,{children:"Date"}),"-oliona tai ISO-muotoisena merkkijonona, ja palauttaa p\xe4iv\xe4m\xe4\xe4r\xe4\xe4 vastaavan merkkijonon kuten ",(0,n.jsx)(t.code,{children:'"31.12.2023"'}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"function formatDate(input: Date | string): string {\n    let date: Date;\n\n    if (typeof input === 'string') {\n        // tyypiksi on rajattu `string`\n        date = new Date(input);\n    } else {\n        // tyypiksi on nyt rajattu `Date`\n        date = input;\n    }\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n\n    // Palautetaan p\xe4iv\xe4 merkkijonona:\n    return `${day}.${month}.${year}`;\n}\n\nconsole.log(formatDate(new Date(2023, 11, 31)));\nconsole.log(formatDate(\"2023-12-31\"));\n"})}),"\n",(0,n.jsxs)(t.p,{children:["TypeScriptin tarkastukset, kuten ",(0,n.jsx)(t.code,{children:"typeof input === 'string'"}),", rajaavat mahdollisia tyyppej\xe4 siten, ett\xe4 kyseisess\xe4 if-lohkossa ",(0,n.jsx)(t.code,{children:"input"}),"-muuttujan tyypiksi tiedet\xe4\xe4n ",(0,n.jsx)(t.code,{children:"string"}),", ja vastaavasti ",(0,n.jsx)(t.code,{children:"else"}),"-lohkossa sen tiedet\xe4\xe4n olevan ",(0,n.jsx)(t.code,{children:"Date"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"predikaatit-type-predicates",children:"Predikaatit (type predicates)"}),"\n",(0,n.jsxs)(t.p,{children:["Tyyppien tarkastusta varten on usein hy\xf6dyllist\xe4 tehd\xe4 erillisi\xe4 funktioita, joissa monimutkaisemmat tarkastukset voidaan tehd\xe4 uudelleenk\xe4ytett\xe4v\xe4ll\xe4 ja yll\xe4pidett\xe4v\xe4ll\xe4 tavalla. Kun funktion paluuarvon paikalle m\xe4\xe4ritell\xe4\xe4n ",(0,n.jsx)(t.em,{children:"tyyppipredikaatti"})," (",(0,n.jsx)(t.em,{children:"type predicate"}),") muodossa ",(0,n.jsx)(t.code,{children:"value is string"}),", jossa ",(0,n.jsx)(t.code,{children:"value"})," vastaa funktion parametrin nime\xe4 ja ",(0,n.jsx)(t.code,{children:"string"})," tarkastettavaa tyyppi\xe4, osaa TypeScript hy\xf6dynt\xe4\xe4 omaa funktiotasi osana tyyppien rajausta:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:'const isString = (value: any): value is string => { // "value is xxx" = type predicate\n    return typeof value === \'string\';\n}\n\nconst printLength = (value: string | number) => {\n    if (isString(value)) {\n        console.log(value.length);\n    } else {\n        console.log("Not a string");\n    }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Tyyppien tarkastaminen ei usein ole aivan yht\xe4 yksinkertaista kuin edell\xe4 ",(0,n.jsx)(t.code,{children:"string"}),"- ja ",(0,n.jsx)(t.code,{children:"Date"}),"-tyyppien vertaileminen. Esimerkiksi omien luokkien olioita tutkittaessa ",(0,n.jsx)(t.code,{children:"typeof"}),"-operaattori tuottaa aina tulokseksi ",(0,n.jsx)(t.code,{children:"object"})," eik\xe4 olion oikeaa tyyppi\xe4. Sen vuoksi koodissa joudutaan usein tekem\xe4\xe4n tarkastuksia olion attribuutteihin liittyen."]}),"\n",(0,n.jsxs)(t.p,{children:["Tarkastellaan esimerkiksi seuraavaa esimerkki\xe4, jossa v\xe4ri\xe4 voidaan esitt\xe4\xe4 joko ",(0,n.jsx)(t.code,{children:"RGB"}),"- tai ",(0,n.jsx)(t.code,{children:"CMYK"}),"-muodossa:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"type RGBColor = {\n    red: number;\n    green: number;\n    blue: number;\n};\n\ntype CMYKColor = {\n    cyan: number;\n    magenta: number;\n    yellow: number;\n    key: number;\n};\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Kun muodostamme kaksi eri tyyppist\xe4 oliota ja hy\xf6dynn\xe4mme JavaScriptin ",(0,n.jsx)(t.code,{children:"typeof"}),"-tarkastusta, saamme molemmille tulokseksi vain ",(0,n.jsx)(t.code,{children:"object"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"let flag: RGBColor = { red: 0, green: 56, blue: 168 };\nlet cross: CMYKColor = { cyan: 100, magenta: 67, yellow: 0, key: 34 };\n\nconsole.log(typeof flag);  // object\nconsole.log(typeof cross); // object\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Ongelman ratkaisemiseksi voimme tarkastaa ajonaikaisesti, l\xf6ytyyk\xf6 oliosta esimerkiksi muuttujat ",(0,n.jsx)(t.code,{children:"red"}),", ",(0,n.jsx)(t.code,{children:"green"})," ja ",(0,n.jsx)(t.code,{children:"blue"}),", ja t\xe4m\xe4n tiedon perusteella palauttaa joko ",(0,n.jsx)(t.code,{children:"true"})," tai ",(0,n.jsx)(t.code,{children:"false"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"/** Returns true if the given color matches the RGBColor type */\nfunction isRGB(color: RGBColor | CMYKColor): color is RGBColor {\n    return 'red' in color && 'green' in color && 'blue' in color;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"Nyt koodissa voidaan kutsua predikaattifunktioita ja TypeScript osaa hy\xf6dynt\xe4\xe4 niiden paluuarvoja tyypin rajaamisessa:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:"{2}",children:"function printColor(color: RGBColor | CMYKColor) {\n    if (isRGB(color)) {\n        // TypeScript ymm\xe4rt\xe4\xe4 predikaatin perusteella, ett\xe4 color on tyyppi\xe4 RGBColor\n        console.log(`red: ${color.red}, green: ${color.green}, blue: ${color.blue}`);\n    } else {\n        // color ei ollut RGBColor, joten se on CMYKColor\n        console.log(`cyan: ${color.cyan}, magenta: ${color.magenta}, yellow: ${color.yellow}, key: ${color.key}`);\n    }\n}\n\nprintColor(flag);   // red: 0, green: 56, blue: 168\nprintColor(cross);  // cyan: 100, magenta: 67, yellow: 0, key: 34\n"})})]})}function c(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>r,a:()=>o});var n=a(7294);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);