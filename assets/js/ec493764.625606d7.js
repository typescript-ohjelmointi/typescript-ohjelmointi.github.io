"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[22],{5590:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var i=n(5893),a=n(1151);const s={sidebar_position:1},o="Perustietotyypit",r={id:"tutorial-extras/tyyppijarjestelma",title:"Perustietotyypit",description:"Monet TypeScriptin oppaat keskittyv\xe4t omien tyyppien m\xe4\xe4rittelyyn, mutta p\xe4\xe4set hyvin liikkeelle my\xf6s ilman omia tyyppej\xe4. TypeScriptiss\xe4 on mm. valmiit tyypit string, number ja boolean, jotka vastaavat JavaScriptin arvoja:",source:"@site/docs/tutorial-extras/01-tyyppijarjestelma.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/tyyppijarjestelma",permalink:"/docs/tutorial-extras/tyyppijarjestelma",draft:!1,unlisted:!1,editUrl:"https://github.com/typescript-ohjelmointi/typescript-ohjelmointi.github.io/tree/main/docs/tutorial-extras/01-tyyppijarjestelma.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tyyppij\xe4rjestelm\xe4",permalink:"/docs/category/tyyppij\xe4rjestelm\xe4"},next:{title:"Omat tietotyypit",permalink:"/docs/tutorial-extras/omat-tyypit"}},l={},p=[{value:"Funktioiden tyypit",id:"funktioiden-tyypit",level:3},{value:"Any ja unknown",id:"any-ja-unknown",level:3},{value:"Taulukot (array)",id:"taulukot-array",level:3},{value:"Tuplet (monikko)",id:"tuplet-monikko",level:3},{value:"Suorituksen aikaiset tyypit (runtime)",id:"suorituksen-aikaiset-tyypit-runtime",level:3}];function u(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"perustietotyypit",children:"Perustietotyypit"}),"\n",(0,i.jsxs)(t.p,{children:["Monet TypeScriptin oppaat keskittyv\xe4t omien tyyppien m\xe4\xe4rittelyyn, mutta p\xe4\xe4set hyvin liikkeelle my\xf6s ilman omia tyyppej\xe4. TypeScriptiss\xe4 on mm. valmiit tyypit ",(0,i.jsx)(t.code,{children:"string"}),", ",(0,i.jsx)(t.code,{children:"number"})," ja ",(0,i.jsx)(t.code,{children:"boolean"}),", jotka vastaavat JavaScriptin arvoja:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// merkkijonot eli 'string'\nlet language: string = 'TypeScript';\n\n// 'number' k\xe4sitt\xe4\xe4 sek\xe4 kokonais- ett\xe4 liukuluvut:\nlet wholeNumber: number = 2023;\nlet decimalNumber: number = 3.14;\n\n// taulukot voidaan m\xe4\xe4ritell\xe4 joko `tyyppi[]` tai `Array<tyyppi>`\nlet positive: number[] = [1, 2, 3, 4];\nlet negative: Array<number> = [-1, -2, -3, -4];\n"})}),"\n",(0,i.jsx)(t.p,{children:"Tyyppien m\xe4\xe4rittely t\xe4ll\xe4 tarkkuudella on kuitenkin usein turhaa, koska TypeScript osaa p\xe4\xe4tell\xe4 asiayhteydest\xe4 mm. muuttujien sek\xe4 funktioiden paluuarvojen tyypit."}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:'"For the most part you don\u2019t need to explicitly learn the rules of inference. If you\u2019re starting out, try using fewer type annotations than you think - you might be surprised how few you need for TypeScript to fully understand what\u2019s going on."'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html",children:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Ilman yll\xe4 esitetty\xe4 vapaaehtoista tyyppien m\xe4\xe4rittely\xe4 koodi n\xe4ytt\xe4\xe4kin JavaScriptilt\xe4, joskin k\xe4\xe4nt\xe4j\xe4 p\xe4\xe4ttelee tyypit ja osaa huomioida ne my\xf6hemmin n\xe4it\xe4 muuttujia k\xe4ytett\xe4ess\xe4:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"let language = 'TypeScript';        // language: string\n\nlet wholeNumber = 2023;             // wholeNumber: number\nlet decimalNumber = 3.14;           // decimalNumber: number\n\nlet positive = [1, 2, 3, 4];        // positive: number[]\nlet negative = [-1, -2, -3, -4];    // negative: number[]\n"})}),"\n",(0,i.jsx)(t.p,{children:"Tyypin m\xe4\xe4ritteleminen eksplisiittisesti on v\xe4ltt\xe4m\xe4t\xf6nt\xf6nt\xe4 erityisesti silloin, kun luot tyhji\xe4 tietorakenteita, joista TS ei pysty p\xe4\xe4ttelem\xe4\xe4n niiden my\xf6hemp\xe4\xe4 tyyppi\xe4:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"let empty = [];                     // never[] -> t\xe4h\xe4n ei voida lis\xe4t\xe4 arvoja, koska tyyppi\xe4 ei tiedet\xe4\nlet numbers: number[] = [];         // number[] -> t\xe4h\xe4n voidaan jatkossa lis\xe4t\xe4 vain numeroita\n"})}),"\n",(0,i.jsx)(t.h3,{id:"funktioiden-tyypit",children:"Funktioiden tyypit"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:'"Functions are the primary means of passing data around in JavaScript. TypeScript allows you to specify the types of both the input and output values of functions."'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#functions",children:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#functions"})}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// funktion parametrille ja paluuarvolle m\xe4\xe4ritell\xe4\xe4n tyypit:\nfunction shout(str1: string): string {\n    return str1.toUpperCase() + '!!!';\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["TypeScript ei osaa p\xe4\xe4tell\xe4 parametrin tyyppi\xe4, joten sen m\xe4\xe4ritteleminen on tarpeen. Sen sijaan yll\xe4 ",(0,i.jsx)(t.strong,{children:"paluuaron tyyppi"})," ",(0,i.jsx)(t.code,{children:"string"})," voidaan p\xe4\xe4tell\xe4 automaattisesti ",(0,i.jsx)(t.code,{children:"return"}),"-lausekkeessa olevasta tyypist\xe4, eik\xe4 sit\xe4 tarvitse v\xe4ltt\xe4m\xe4tt\xe4 kirjoittaa itse."]}),"\n",(0,i.jsx)(t.h3,{id:"any-ja-unknown",children:"Any ja unknown"}),"\n",(0,i.jsx)(t.p,{children:"Toisinaan datan tyyppi ei ole tiedossa tai sill\xe4 ei ole merkityst\xe4:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// `any` tyyppi\xe4 voidaan k\xe4ytt\xe4\xe4 silloin, kun arvon tyypill\xe4 ei ole merkityst\xe4:\nfunction logAnything(thing: any) {\n    console.log(new Date(), thing);\n}\n\n// usein on kuitenkin parempi k\xe4ytt\xe4\xe4 tyyppi\xe4 `unknown`:\nfunction logUnknown(thing: unknown) {\n    console.log(new Date(), thing);\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Edell\xe4 esitetyist\xe4 tyypeist\xe4 ",(0,i.jsx)(t.code,{children:"any"})," on siin\xe4 mieless\xe4 riskialttiimpi, ett\xe4 sen kautta teht\xe4vien operaatioiden osalta TS ei tee tarkastuksia:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"function doSomething(bar: any) {\n    bar.toUpperCase();  // ei virhett\xe4 k\xe4\xe4nnett\xe4ess\xe4, mutta kaatuu suoritettaessa!\n}\n\ndoSomething(1);\ndoSomething('hello');\n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"unknown"})," ei puolestaan salli mahdollisesti virheellisi\xe4 operaatioita:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"function doSomething(bar: unknown) {\n    bar.toUpperCase();  // k\xe4\xe4nn\xf6svirhe!\n}\n\ndoSomething(1);\ndoSomething('hello');\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Kun tiedon tyyppi ei ole ennalta tiedossa, voidaan se selvitt\xe4\xe4 ajonaikaisesti ehtorakenteilla ja mm. JavaScriptin ",(0,i.jsx)(t.code,{children:"typeof"}),"-operaation avulla:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"function doSomething(bar: unknown) {\n    if (typeof bar === 'string') {\n        // TypeScript osaa nyt tunnistaa `bar`-arvon tyypiksi merkkijonon:\n        console.log(bar.toUpperCase());\n    } else {\n        console.log(bar);\n    }\n}\n\ndoSomething(0);         // 0\ndoSomething('hello');   // 'HELLO'\n"})}),"\n",(0,i.jsx)(t.h3,{id:"taulukot-array",children:"Taulukot (array)"}),"\n",(0,i.jsxs)(t.p,{children:["Taulukot ovat tyypitettyj\xe4 siin\xe4 miss\xe4 yksitt\xe4iset muuttujat, esim. ",(0,i.jsx)(t.code,{children:"string[]"})," tai ",(0,i.jsx)(t.code,{children:"number[]"}),'. Eri tyyppisi\xe4 arvoja lis\xe4tt\xe4ess\xe4 TS luo "union"-tyyppej\xe4, kuten ',(0,i.jsx)(t.code,{children:"(string | number)[]"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Seuraavat esimerkit n\xe4ytt\xe4v\xe4t, miten puuttuviin arvoihin varautuminen voidaan ohittaa (",(0,i.jsx)(t.code,{children:"!"}),") ja miten tietyn arvon tyyppi voidaan itse m\xe4\xe4ritt\xe4\xe4 ",(0,i.jsx)(t.code,{children:"as"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"let faces = ['\ud83d\ude00', '\ud83d\ude41'];          // string[]\nlet numbers = [7, 100, 42];         // number[]\n\nlet all = [...faces, ...numbers];   // (string | number)[]\n\n// `at` saattaa palauttaa merkkijonon, numeron tai `undefined`:\nlet something = all.at(-1);         // something: (string | number | undefined)\n\n// huutomerkki `!` kertoo TypeScriptille, ett\xe4 arvo on olemassa:\nlet thing = all.at(-1)!;            // thing: (string | number)\n\n// `as`-avainsanalla voidaan ohittaa tyypin p\xe4\xe4ttely ja kertoa se itse:\nlet answer = all.at(-1) as number;  // answer: number\n\nconsole.table({ something, thing, answer });\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Vaikka edell\xe4 kolmen viimeisen muuttujan tyypit ovat TypeScriptin n\xe4k\xf6kulmasta eri, on niiss\xe4 luonnollisesti tasan sama arvo, eli taulukon viimeinen numero ",(0,i.jsx)(t.code,{children:"42"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  (index)  \u2502 Values \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 something \u2502   42   \u2502   // string | number | undefined\n\u2502   thing   \u2502   42   \u2502   // string | number\n\u2502  answer   \u2502   42   \u2502   // number\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Edell\xe4 k\xe4ytetty ",(0,i.jsx)(t.code,{children:"at"}),"-metodi toimii sek\xe4 positiivisilla ett\xe4 negatiivisilla indekseill\xe4:"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:'"The at() method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array."'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at",children:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at"})}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"tuplet-monikko",children:"Tuplet (monikko)"}),"\n",(0,i.jsxs)(t.p,{children:["TS tukee JavaScriptin taulukoille my\xf6s erityist\xe4 ",(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types",children:"tuple-tyyppi\xe4"}),", jossa voidaan ennalta m\xe4\xe4ritell\xe4 taulukon pituus ja kunkin eri indeksin tyyppi:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"type NameAndAge = [string, number];\n\nlet alice: NameAndAge = ['Alice', 29];  // ok!\nlet bob: NameAndAge = ['Bob', 28, 1];   // k\xe4\xe4nn\xf6svirhe! `Source has 3 element(s) but target allows only 2`\n"})}),"\n",(0,i.jsx)(t.h3,{id:"suorituksen-aikaiset-tyypit-runtime",children:"Suorituksen aikaiset tyypit (runtime)"}),"\n",(0,i.jsx)(t.p,{children:'Koska TypeScript-koodi k\xe4\xe4nnet\xe4\xe4n JavaScriptiksi, ei koodia suoritettaessa voida k\xe4ytt\xe4\xe4 TypeScriptin tyyppej\xe4. Kaikki tieto TypeScriptin tyypeist\xe4 "katoaakin" suoritettaessa ja j\xe4ljelle j\xe4\xe4 vain JavaScriptin tyypit:'}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"class Cat {\n    constructor(public name: string) {\n    }\n}\n\nclass Car {\n    constructor(public make: string, public model: string) {\n     }\n}\n\nlet animal = new Cat('kisu');\nlet automobile = new Car('VW', 'Beetle');\nlet strings = ['apotti', 'sarastia'];\n\n\n// tieto \"luokista\" katoaa k\xe4\xe4nnett\xe4ess\xe4:\nconsole.log(typeof animal);     // 'object'\nconsole.log(typeof automobile); // 'object'\nconsole.log(typeof strings);    // 'object'\n\n\n// JS:n perustyyppien osalta `typeof` palauttaa kuitenkin oikeat tiedot:\nconsole.log(typeof 1);          // 'number'\nconsole.log(typeof true);       // 'boolean'\nconsole.log(typeof 'hello');    // 'string'\n"})})]})}function c(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>o});var i=n(7294);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);