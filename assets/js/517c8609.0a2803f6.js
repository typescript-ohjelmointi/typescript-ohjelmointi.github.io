"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[421],{2444:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var a=n(5893),i=n(1151);const s={sidebar_position:6},o="Map-tyypit (mapped types)",p={id:"tyypit/mapped-types",title:"Map-tyypit (mapped types)",description:"1. Basic mapping of type",source:"@site/docs/tyypit/06-mapped-types.md",sourceDirName:"tyypit",slug:"/tyypit/mapped-types",permalink:"/docs/tyypit/mapped-types",draft:!1,unlisted:!1,editUrl:"https://github.com/typescript-ohjelmointi/typescript-ohjelmointi.github.io/tree/main/docs/tyypit/06-mapped-types.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Tyyppien unionit ja leikkaukset",permalink:"/docs/tyypit/unions-intersections"},next:{title:"Tyyppivahdit (type guards)",permalink:"/docs/tyypit/type-guards"}},r={},l=[{value:"1. Basic mapping of type",id:"1-basic-mapping-of-type",level:2},{value:"Some examples of mapped types with generics",id:"some-examples-of-mapped-types-with-generics",level:2},{value:"Union type of the values in an array with [number]-syntax",id:"union-type-of-the-values-in-an-array-with-number-syntax",level:2},{value:"Index signatures ([key: xxx])",id:"index-signatures-key-xxx",level:2},{value:"Mapping allows future additions to reflect on depending types &quot;automatically&quot;",id:"mapping-allows-future-additions-to-reflect-on-depending-types-automatically",level:2},{value:"&quot;Record&quot; ja avain-arvo-pareja sis\xe4lt\xe4v\xe4t oliot",id:"record-ja-avain-arvo-pareja-sis\xe4lt\xe4v\xe4t-oliot",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"map-tyypit-mapped-types",children:"Map-tyypit (mapped types)"}),"\n",(0,a.jsx)(t.h2,{id:"1-basic-mapping-of-type",children:"1. Basic mapping of type"}),"\n",(0,a.jsxs)(t.p,{children:["A mapped type is the process of creating a new type by mapping type information from an existing type. The in operator maps over each item in the union type to create a new type. In other words, the in operator allows us to loop through each type in a union type. (",(0,a.jsx)(t.a,{href:"https://learntypescript.dev/08/l2-mapped-type",children:"https://learntypescript.dev/08/l2-mapped-type"}),"). ",(0,a.jsx)(t.a,{href:"https://javascript.plainenglish.io/using-typescript-mapped-types-like-a-pro-be10aef5511a",children:"https://javascript.plainenglish.io/using-typescript-mapped-types-like-a-pro-be10aef5511a"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"type MappedTypeName = { [K in UnionType]: ExistingType };\ntype MappedTypeName = {[K in keyof ExistingType1]: ExistingType2;};\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"interface Todo {\n    title: string\n    description: string\n    completed: boolean\n}\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'//k in ...\n//..manually. Try adding something else to in\ntype TodoConstucted = {[K in "title" | "description" | "completed"]: Todo[K]}\n//..utilizing keyof\ntype TodoConstucted2 = {[K in keyof Todo]: Todo[K]}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"some-examples-of-mapped-types-with-generics",children:"Some examples of mapped types with generics"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"type MyMakeOptional<T> = {\n    [P in keyof T]?: T[P];\n};\n\n//-? expression\ntype MyRemoveOptional<T> = {\n    [P in keyof T]-?: T[P];\n};\n\ntype MyReadonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\nconst optionalTodo: MyMakeOptional<Todo> = { title: 'Optional todo' };\nconst readOnlyTodo: MyReadonly<Todo> = { title: 'Read only todo', description: 'desc', completed: false };\nreadOnlyTodo.title = 'Todo 2'; // Error: Cannot assign to 'Todo 2' because it mapped to a read-only property.\n"})}),"\n",(0,a.jsx)(t.h2,{id:"union-type-of-the-values-in-an-array-with-number-syntax",children:"Union type of the values in an array with [number]-syntax"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const myArray = ['one', 'two'] as const\ntype ArrayType = typeof myArray\ntype ValidNumber = typeof myArray[number]\n//why not this?\ntype ValidNumber2 = typeof myArray[keyof ArrayType]\n//what about this, arrays are actually objects, aren't they? (//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_object)?\ntype ValidNumber3 = typeof myArray[0 | 1]\n"})}),"\n",(0,a.jsx)(t.h2,{id:"index-signatures-key-xxx",children:"Index signatures ([key: xxx])"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures",children:"https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures"}),", ",(0,a.jsx)(t.a,{href:"https://blog.logrocket.com/typescript-mapped-types/",children:"https://blog.logrocket.com/typescript-mapped-types/"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"type User = {\n    name: string;\n    preferences: {\n      [key: string]: string;\n    }\n};\nconst currentUser: User = {\n    name: 'Foo Bar',\n    preferences: {\n        lang: 'en',\n    },\n};\n"})}),"\n",(0,a.jsx)(t.h2,{id:"mapping-allows-future-additions-to-reflect-on-depending-types-automatically",children:'Mapping allows future additions to reflect on depending types "automatically"'}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://blog.logrocket.com/typescript-mapped-types/",children:"https://blog.logrocket.com/typescript-mapped-types/"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'type AppConfig = {\n    username: string,\n    layout: string,\n    //more in the future possibly, try adding here something\n}\n\n// Whether or not the user has permission to change configuration values\ntype AppPermissions = {\n    // Notice the as-keyword\n    // Notice template literal `change${Type}`\n    // and "intrinsic string manipulation" (Capitalize)\n    //(https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html)\n    [Key in keyof AppConfig as `change${Capitalize<Key>}`]: boolean\n}\n\nconst appPermission: AppPermissions = {changeUsername: true, changeLayout: false}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"record-ja-avain-arvo-pareja-sis\xe4lt\xe4v\xe4t-oliot",children:'"Record" ja avain-arvo-pareja sis\xe4lt\xe4v\xe4t oliot'}),"\n",(0,a.jsxs)(t.p,{children:["JavaScriptiss\xe4 olioita (object) k\xe4ytet\xe4\xe4n usein avain-arvo-pareja sis\xe4lt\xe4v\xe4n\xe4 map-tietorakenteena. T\xe4m\xe4 poikkeaa edell\xe4 esitellyist\xe4 esimerkeist\xe4 siten, ett\xe4 avainten nimet eiv\xe4t ole ennalta tiedossa, vaikka sek\xe4 avainten ett\xe4 arvojen tyypit tiedet\xe4\xe4nkin. TypeScript mahdollistaa ns. ",(0,a.jsx)(t.a,{href:"https://basarat.gitbook.io/typescript/type-system/index-signatures#declaring-an-index-signature",children:"index signaturen"}),", jolla voidaan m\xe4\xe4ritell\xe4 objektin avainten sek\xe4 arvojen tyypit:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"let emojis: { [key: string]: string } = {};\nemojis['smile'] = '\ud83d\ude42';\nemojis['laugh'] = '\ud83d\ude04';\n\n\n// objektin kaikki avaimet saadaan array:na JS:n Object.keys-metodilla:\nconsole.log(Object.keys(emojis));   // [ 'smile', 'laugh' ]\n\n// objektin kaikki arvot saadaan array:na JS:n Object.values-metodilla:\nconsole.log(Object.values(emojis)); // [ '\ud83d\ude42', '\ud83d\ude04' ]\n\n\n// TypeScript ei takaa, ett\xe4 avaimelle l\xf6ytyy arvoa:\nconsole.log(emojis['angry']);       // undefined\n\n// avain voidaan tarkastaa `in`-operaatiolla:\nif ('smile' in emojis) {\n    console.log(emojis['smile']);   // \ud83d\ude42\n}\n\nconsole.table(emojis); /* \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u2502 (index) \u2502 Values \u2502\n                          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n                          \u2502  smile  \u2502  '\ud83d\ude42'  \u2502\n                          \u2502  laugh  \u2502  '\ud83d\ude04'  \u2502\n                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 */\n\n"})}),"\n",(0,a.jsxs)(t.p,{children:['TypeScriptin "utility types" -tyypeist\xe4 l\xf6ytyy my\xf6s valmis ',(0,a.jsx)(t.code,{children:"Record"}),", jonka avulla objektin avainten ja arvojen tyypit on m\xe4\xe4ritett\xe4viss\xe4 viel\xe4 astetta selke\xe4mmin:"]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Record<Keys, Type>"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.em,{children:'"Constructs an object type whose property keys are Keys and whose property values are Type. This utility can be used to map the properties of a type to another type."'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",children:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"})}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"let weekdays: Record<string, string> = {};\nweekdays['monday'] = 'maanantai';\nweekdays['tuesday'] = 'tiistai';\n\nconsole.log(weekdays);                  // { monday: 'maanantai', tuesday: 'tiistai' }\nconsole.log('tuesday' in weekdays);     // true\n\nconsole.log(weekdays['someday']);       // undefined\n"})})]})}function y(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>p,a:()=>o});var a=n(7294);const i={},s=a.createContext(i);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);