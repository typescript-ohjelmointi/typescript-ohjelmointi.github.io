"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[703],{7367:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var n=t(5893),s=t(1151);const a={sidebar_position:2},l="Type ja interface",r={id:"tyypit/type-ja-interface",title:"Type ja interface",description:"Edellisiss\xe4 kappaleissa olemme perehtyneet siihen, miten TypeScriptill\xe4 voidaan m\xe4\xe4ritell\xe4 eri muuttujille ja funktioille JavaScriptin perustietotyyppej\xe4 kuten string ja number. TypeScriptist\xe4 on kuitenkin viel\xe4 huomattavasti enemm\xe4n hy\xf6ty\xe4 silloin, kun omassa ohjelmalogiikassa hy\xf6dynnet\xe4\xe4n monipuolisesti omia ja eri kirjastoista l\xf6ytyvi\xe4 tietotyyppej\xe4.",source:"@site/docs/tyypit/02-type-ja-interface.md",sourceDirName:"tyypit",slug:"/tyypit/type-ja-interface",permalink:"/docs/tyypit/type-ja-interface",draft:!1,unlisted:!1,editUrl:"https://github.com/typescript-ohjelmointi/typescript-ohjelmointi.github.io/tree/main/docs/tyypit/02-type-ja-interface.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Perustietotyypit",permalink:"/docs/tyypit/tyyppijarjestelma"},next:{title:"Keyof ja typeof",permalink:"/docs/tyypit/keyof-typeof"}},o={},d=[{value:"Type",id:"type",level:2},{value:"Interface",id:"interface",level:2},{value:"Valinnaiset attribuutit",id:"valinnaiset-attribuutit",level:2},{value:"Rakenteellinen tyypitys (structural typing)",id:"rakenteellinen-tyypitys-structural-typing",level:3},{value:"Sis\xe4kk\xe4iset tyypit",id:"sis\xe4kk\xe4iset-tyypit",level:2},{value:"Tuplet (monikko)",id:"tuplet-monikko",level:2},{value:"Muita hy\xf6dyllisi\xe4 ominaisuuksia",id:"muita-hy\xf6dyllisi\xe4-ominaisuuksia",level:2},{value:"<code>readonly</code> ja <code>as const</code>",id:"readonly-ja-as-const",level:3}];function c(e){const i={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"type-ja-interface",children:"Type ja interface"}),"\n",(0,n.jsxs)(i.p,{children:["Edellisiss\xe4 kappaleissa olemme perehtyneet siihen, miten TypeScriptill\xe4 voidaan m\xe4\xe4ritell\xe4 eri muuttujille ja funktioille JavaScriptin perustietotyyppej\xe4 kuten ",(0,n.jsx)(i.code,{children:"string"})," ja ",(0,n.jsx)(i.code,{children:"number"}),". TypeScriptist\xe4 on kuitenkin viel\xe4 huomattavasti enemm\xe4n hy\xf6ty\xe4 silloin, kun omassa ohjelmalogiikassa hy\xf6dynnet\xe4\xe4n monipuolisesti omia ja eri kirjastoista l\xf6ytyvi\xe4 tietotyyppej\xe4."]}),"\n",(0,n.jsxs)(i.p,{children:["Tyypillisimm\xe4t tavat m\xe4\xe4ritell\xe4 omia tyyppej\xe4 TypeScriptiss\xe4 ovat ",(0,n.jsx)(i.code,{children:"type"}),", ",(0,n.jsx)(i.code,{children:"interface"})," ja ",(0,n.jsx)(i.code,{children:"class"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"type",children:"Type"}),"\n",(0,n.jsx)(i.p,{children:"Yksinkertaisimmillaan tietyn olion yyppi voidaan m\xe4\xe4ritell\xe4 suoraan muuttujaan:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"let user: { id: number, username: string } = { id: 1, username: 'Alice'};\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Yll\xe4 sijoitusoperaattorin ",(0,n.jsx)(i.code,{children:"="})," vasemmalla puolella on m\xe4\xe4ritetty olion tyyppi, ja oikealla puolella itse sijoitettava olio. TypeScript varmistaa, ett\xe4 muuttujaan sijoitettava arvo sis\xe4lt\xe4\xe4 tarvittavat attribuutit ja ett\xe4 ne ovat oikean tyyppisi\xe4."]}),"\n",(0,n.jsx)(i.p,{children:'Kuten huomaat, tyypin m\xe4\xe4ritteleminen suoraan muuttujaan on luettavuuden ja usein my\xf6s uudelleenk\xe4ytett\xe4vyyden n\xe4k\xf6kulmasta huono idea. Tyypeille voidaankin m\xe4\xe4ritell\xe4 "aliaksia", jotka tekev\xe4t niist\xe4 uudelleenk\xe4ytett\xe4vi\xe4:'}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"type User = {\n    id: number;\n    username: string;\n};\n\nlet user1: User = { id: 1, username: 'Alice' };\nlet user2: User = { id: 2, username: 'Bob' };\n"})}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.em,{children:'"Think of Types Like Variables'})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.em,{children:'Much like how you can create variables with the same name in different scopes, a type has similar semantics."'})}),"\n",(0,n.jsxs)(i.p,{children:["Microsoft. ",(0,n.jsx)(i.a,{href:"https://www.typescriptlang.org/static/TypeScript%20Types-ae199d69aeecf7d4a2704a528d0fd3f9.png",children:"TypeScript Cheat Sheet (Type)"})]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"interface",children:"Interface"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"type"}),"-avainsanan lis\xe4ksi TypeScriptiss\xe4 omia oliotyyppej\xe4 voidaan m\xe4\xe4ritell\xe4 my\xf6s rajapintoina ",(0,n.jsx)(i.code,{children:"interface"}),"-avainsanalla. Syntaktisesti ",(0,n.jsx)(i.code,{children:"interface"})," n\xe4ytt\xe4\xe4 hyvin samalta kuin ",(0,n.jsx)(i.code,{children:"type"}),', mutta siin\xe4 ei k\xe4ytet\xe4 "sijoitusoperaattoria" ',(0,n.jsx)(i.code,{children:"="}),":"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"interface User {\n    id: number;\n    username: string;\n}\n\nlet user1: User = { id: 1, username: 'Alice' };\nlet user2: User = { id: 2, username: 'Bob' };\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Sek\xe4 ",(0,n.jsx)(i.code,{children:"type"})," ett\xe4 ",(0,n.jsx)(i.code,{children:"interface"})," toimivat monilta osin samalla tavalla. Niill\xe4 on kuitenkin tiettyj\xe4 eroja liittyen erityisesti eri tyyppien yhdistelemiseen. Hy\xf6dynn\xe4mme t\xe4ll\xe4 sivulla p\xe4\xe4asiassa ",(0,n.jsx)(i.code,{children:"type"}),"-m\xe4\xe4rityksi\xe4"]}),"\n",(0,n.jsxs)(i.p,{children:["Voit lukea lis\xe4\xe4 rajapinnoista ",(0,n.jsx)(i.a,{href:"https://www.typescriptlang.org/docs/handbook/interfaces.html",children:"TypeScriptin k\xe4sikirjasta"}),"."]}),"\n",(0,n.jsxs)(i.admonition,{title:"Puolipisteet ja pilkut",type:"info",children:[(0,n.jsx)(i.p,{children:"TypeScript on eritt\xe4in salliva sen suhteen, k\xe4ytet\xe4\xe4nk\xf6 tyyppien m\xe4\xe4rittelyss\xe4 eri attribuuttien v\xe4lill\xe4 pilkkuja tai puolipisteit\xe4, tai j\xe4tet\xe4\xe4nk\xf6 ne kokonaan kirjoittamatta:"}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"// puolipisteill\xe4:\ntype User = {\n    id: number;\n    username: string;\n};\n"})}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"// pilkuilla:\ntype User = {\n    id: number,\n    username: string\n}\n"})}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"// ilman:\ntype User = {\n    id: number\n    username: string\n}\n"})}),(0,n.jsxs)(i.p,{children:['T\xe4m\xe4 on makuasia ja "oikea" tapa riippuu osin henkil\xf6kohtaisista ja tiimin mieltymyksist\xe4. TypeScriptin omassa dokumentaatiossa suositaan ylint\xe4 tapaa (',(0,n.jsx)(i.code,{children:";"}),"), joten sit\xe4 k\xe4ytet\xe4\xe4n my\xf6s t\xe4m\xe4n kurssin esimerkeiss\xe4."]})]}),"\n",(0,n.jsx)(i.h2,{id:"valinnaiset-attribuutit",children:"Valinnaiset attribuutit"}),"\n",(0,n.jsxs)(i.p,{children:["Eri tyypeiss\xe4 voi olla my\xf6s valinnaisia attribuutteja, jolloin niiden nimen per\xe4\xe4n kirjoitetaan kysymysmerkki ",(0,n.jsx)(i.code,{children:"?"}),":"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"type User = {\n    id: number;\n    username: string;\n    email?: string;  // `?` tarkoittaa valinnaista arvoa\n};\n\nlet user1: User = { id: 1, username: 'alice' };\nlet user2: User = { id: 2, username: 'bob', email: 'bob@example.com' };\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Yll\xe4 ",(0,n.jsx)(i.code,{children:"User"}),"-olioita voidaan siis luoda joko ",(0,n.jsx)(i.code,{children:"email"}),"-attribuutilla tai ilman. Koska attribuutti on m\xe4\xe4ritetty valinnaiseksi, TypeScript-k\xe4\xe4nt\xe4j\xe4 huolehtii siit\xe4, ett\xe4 koodissa varaudutaan my\xf6s tilanteisiin, joissa arvoa ei ole asetettu:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"console.log(user2.email.toLowerCase());   // k\xe4\xe4nn\xf6svirhe, koska email saattaa olla `undefined`\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Tyhjien arvojen tarkastamiseksi on useita eri l\xe4hestymistapoja, mutta esimerkiksi JavaScriptin ",(0,n.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",children:'"optional chaining"-operaattori'})," eli ",(0,n.jsx)(i.code,{children:"?"})," auttaa varautumaan puuttuvaan arvoon:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"console.log(user2.email?.toLowerCase());  // ei virhett\xe4\n"})}),"\n",(0,n.jsx)(i.h3,{id:"rakenteellinen-tyypitys-structural-typing",children:"Rakenteellinen tyypitys (structural typing)"}),"\n",(0,n.jsxs)(i.p,{children:["Toisin kuin monissa muissa kieliss\xe4, TypeScriptiss\xe4 tyyppij\xe4rjestelm\xe4 ei itse asiassa perustu siihen, ett\xe4 arvojen tyypit vastaisivat t\xe4sm\xe4lleen muuttujien tai parametrien tyyppej\xe4. Sen sijaan TypeScript tarkastaa, ett\xe4 tyypit ",(0,n.jsx)(i.strong,{children:"yhteensopivia"}),". Yhteensopivuus m\xe4\xe4r\xe4ytyy eri arvojen rakenteen mukaan."]}),"\n",(0,n.jsxs)(i.p,{children:["Esimerkiksi seuraavassa koodissa on tyypit ",(0,n.jsx)(i.code,{children:"Movie"})," ja ",(0,n.jsx)(i.code,{children:"Book"})," sek\xe4 ",(0,n.jsx)(i.code,{children:"printMovie"}),", joka tulostaa elokuvan nimen:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"type Movie = {\n    title: string;\n};\n\ntype Book = {\n    title: string;\n};\n\n\nlet borat: Movie = { title: 'Borat' };\nlet cleanCode: Book = { title: 'Clean code' };\n\n\nfunction printMovie(m: Movie) {\n    console.log(m.title);\n}\n\nprintMovie(borat);\nprintMovie(cleanCode); // cleanCode on `Book`, mutta t\xe4m\xe4 toimii silti\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Koodissa ",(0,n.jsx)(i.code,{children:"printMovie"}),"-funktiota voidaan kutsua sek\xe4 ",(0,n.jsx)(i.code,{children:"Movie"}),"- ett\xe4 ",(0,n.jsx)(i.code,{children:"Book"}),"-tyyppisten muuttujien kanssa, koska ",(0,n.jsx)(i.code,{children:"Book"})," sis\xe4lt\xe4\xe4 kaikki samat attribuutit kuin ",(0,n.jsx)(i.code,{children:"Movie"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["Yhteensopivuus toimii samalla tavoin, vaikka tyypit olisivat m\xe4\xe4riteltyn\xe4 ristiin ",(0,n.jsx)(i.code,{children:"type"}),"-, ",(0,n.jsx)(i.code,{children:"interface"}),"- ja ",(0,n.jsx)(i.code,{children:"class"}),"-tyyppisin\xe4. Voit halutessasi perehty\xe4 olioiden yhteensopivuuteen lis\xe4\xe4 ",(0,n.jsx)(i.a,{href:"https://www.typescriptlang.org/docs/handbook/type-compatibility.html",children:"TypeScriptin k\xe4sikirjassa"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"sis\xe4kk\xe4iset-tyypit",children:"Sis\xe4kk\xe4iset tyypit"}),"\n",(0,n.jsxs)(i.p,{children:['Tyyppej\xe4 voidaan m\xe4\xe4ritell\xe4 my\xf6s sis\xe4kk\xe4in siten, ett\xe4 yhden "oliotyypin" sis\xe4ll\xe4 on toinen oliotyyppi. Esimerkiksi seuraavassa tapauksessa ',(0,n.jsx)(i.code,{children:"User"}),"-tyypill\xe4 on ",(0,n.jsx)(i.code,{children:"address"}),", joka m\xe4\xe4rittelee k\xe4ytt\xe4j\xe4n osoitteen omana erillisen\xe4 oliona:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"type User = {\n    name: string;\n    email: string;\n    address: {\n        street: string;\n        city: string;\n        postalCode: string;\n    };\n};\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Mik\xe4li sis\xe4kk\xe4inen tyyppi on luonteeltaan sellainen, jota tarvitaan mahdollisesti erill\xe4\xe4n ",(0,n.jsx)(i.code,{children:"User"}),"-tyypist\xe4, kannattaa se m\xe4\xe4ritell\xe4 erillisen\xe4 tyyppin\xe4, johon viitataan ",(0,n.jsx)(i.code,{children:"User"}),"-tyypist\xe4:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"type Address = {\n    street: string;\n    city: string;\n    postalCode: string;\n};\n\ntype User = {\n    name: string;\n    email: string;\n    address: Address;\n};\n"})}),"\n",(0,n.jsx)(i.h2,{id:"tuplet-monikko",children:"Tuplet (monikko)"}),"\n",(0,n.jsxs)(i.p,{children:["TS tukee JavaScriptin taulukoille my\xf6s erityist\xe4 ",(0,n.jsx)(i.a,{href:"https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types",children:"tuple-tyyppi\xe4"}),". Tuple on k\xe4yt\xe4nn\xf6ss\xe4 taulukko, mutta siihen voidaan m\xe4\xe4ritell\xe4 ennalta taulukon pituus sek\xe4 jokaisessa eri solussa olevan arvon tyyppi. Esimerkiksi seuraavassa koodissa m\xe4\xe4ritell\xe4\xe4n tyyppi ",(0,n.jsx)(i.code,{children:"NameAndAge"}),", joka on k\xe4yt\xe4nn\xf6ss\xe4 taulukko, mutta siihen voidaan asettaa vain kaksi arvoa, joiden tyyppien on oltava ",(0,n.jsx)(i.code,{children:"string"})," ja ",(0,n.jsx)(i.code,{children:"number"}),":"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"type NameAndAge = [string, number];\n\nlet alice: NameAndAge = ['Alice', 29];  // ok!\nlet bob: NameAndAge = ['Bob', 28, 1];   // k\xe4\xe4nn\xf6svirhe! `Source has 3 element(s) but target allows only 2`\n"})}),"\n",(0,n.jsx)(i.h2,{id:"muita-hy\xf6dyllisi\xe4-ominaisuuksia",children:"Muita hy\xf6dyllisi\xe4 ominaisuuksia"}),"\n",(0,n.jsxs)(i.h3,{id:"readonly-ja-as-const",children:[(0,n.jsx)(i.code,{children:"readonly"})," ja ",(0,n.jsx)(i.code,{children:"as const"})]}),"\n",(0,n.jsxs)(i.p,{children:["TypeScript mahdollistaa useita erilaisia k\xe4tevi\xe4 tapoja edist\xe4\xe4 oman koodin yll\xe4pidett\xe4vyytt\xe4, kuten ",(0,n.jsx)(i.code,{children:"private"})," ja ",(0,n.jsx)(i.code,{children:"readonly"})," -attribuutit sek\xe4 ",(0,n.jsx)(i.code,{children:"as const"}),". N\xe4iden avulla voidaan varmistaa, ett\xe4 dataan ei tehd\xe4 esimerkiksi tahattomia muutoksia."]}),"\n",(0,n.jsxs)(i.p,{children:["Seuraavassa esimerkiss\xe4 taulukko m\xe4\xe4ritell\xe4\xe4n vakioksi ",(0,n.jsx)(i.code,{children:"as const"})," -syntaksilla:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"const days = ['ma', 'ti', 'ke', 'to', 'pe', 'la', 'su'] as const;\ndays[0] = 'm\xe5ndag'; // error: Cannot assign to '0' because it is a read-only property.\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Vaihtoehtoisesti tyypiksi voidaan m\xe4\xe4ritell\xe4 ",(0,n.jsx)(i.code,{children:"readonly string[]"}),", jolla on samankaltainen vaikutus:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"const days: readonly string[] = ['ma', 'ti', 'ke', 'to', 'pe', 'la', 'su'];\ndays[0] = 'm\xe5ndag'; // error: Index signature in type 'readonly string[]' only permits reading.\n"})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"JavaScriptin"})," ",(0,n.jsx)(i.code,{children:"const"})," varmistaa, ett\xe4 muuttujaan ei voida asettaa uutta arvoa. ",(0,n.jsx)(i.code,{children:"const"}),"-muuttujaan asetetun arvon muuttaminen on kuitenkin mahdollista, esimerkiksi lis\xe4\xe4m\xe4ll\xe4 listaan uusia arvoja."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"TypeScriptin"})," ",(0,n.jsx)(i.code,{children:"as const"})," ja ",(0,n.jsx)(i.code,{children:"readonly"})," varmistavat muuttujan lis\xe4ksi my\xf6s siihen asetetun arvon muuttumattomuuden. N\xe4ihin ominaisuuksiin voit perehty\xe4 lis\xe4\xe4 itsen\xe4isesti."]})]})}function p(e={}){const{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>r,a:()=>l});var n=t(7294);const s={},a=n.createContext(s);function l(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);